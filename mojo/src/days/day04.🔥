from advent_utils import AdventSolution
from algorithm.functional import vectorize


struct Solution(AdventSolution):
    @staticmethod
    fn part_1(input: List[String]) -> String:
        var total = 0

        @parameter
        fn calc_line[v: Int](idx: Int):
            var winners = List[String]()
            var line = input[idx]
            var inp = line.find(": ") + 2
            var pipe = line.find("|")

            var win_str = line[inp : pipe - 1]
            var num_str = line[pipe + 2 :]
            var winner_amnt = 0

            var accm: String = ""
            for nm in win_str:
                if nm.isspace() and len(accm) > 0:
                    winners.append(accm)
                    accm = ""
                    continue

                accm += nm
            winners.append(accm)
            accm = ""

            for nm in num_str:
                if nm.isspace() and len(accm) > 0:
                    if accm in winners:
                        winner_amnt += 1
                    accm = ""

                    continue

                accm += nm

            if accm in winners:
                winner_amnt += 1
            total += 2 ** (winner_amnt - 1) if winner_amnt > 0 else 0

        vectorize[calc_line, 1](len(input))
        return total

    @staticmethod
    fn part_2(input: List[String]) -> String:
        return 0
