from advent_utils import read_input, AdventSolution
from builtin.string import atol
from collections import Optional


struct Solution(AdventSolution):
    alias T = Int

    @staticmethod
    fn day_1[T: AnyTrivialRegType = Self.T](input: List[String]) -> T:
        var total: Self.T = 0
        for line in input:
            total += calc[F=first_numeric](line[])

        return rebind[T, Self.T](total)

    @staticmethod
    fn day_2[T: AnyTrivialRegType = Self.T](input: List[String]) -> T:
        var mapper = Dict[StringLiteral, Int]()
        mapper["one"] = 1
        mapper["two"] = 2
        mapper["three"] = 3
        mapper["four"] = 4
        mapper["five"] = 5
        mapper["six"] = 6
        mapper["seven"] = 7
        mapper["eight"] = 8
        mapper["nine"] = 9
        mapper["1"] = 1
        mapper["2"] = 2
        mapper["3"] = 3
        mapper["4"] = 4
        mapper["5"] = 5
        mapper["6"] = 6
        mapper["7"] = 7
        mapper["8"] = 8
        mapper["9"] = 9

        var total: Self.T = 0
        for line in input:
            total += line_value(line[], mapper)

        return rebind[T, Self.T](total)


fn first_numeric[accum: IntLiteral](line: String) -> Int:
    var init = len(line) - 1 if accum < 1 else 0
    var end = -1 if accum < 1 else len(line)

    while init != end:
        try:
            return atol(line[init])
        except:
            init += accum
    return 0


fn line_value(line: String, mapper: Dict[StringLiteral, Int]) -> Int:
    # TODO: work in progress since Dicts are not working properly.
    var min_dict = Dict[Int, Int]()
    var max_dict = Dict[Int, Int]()

    for k in mapper:
        var min_idx = line.find(k[])
        var max_idx = line.rfind(k[])
        if min_idx != -1:
            min_dict[min_idx] = mapper.find(k[]).value()
    return 0

    # if max_idx != -1:
    #     max_dict[max_idx] = k[].value

    return 0
    var min_val = len(line)
    var max_val = -1
    for it in min_dict:
        min_val = min(min_val, it[])

    for it in max_dict:
        max_val = max(max_val, it[])

    return min_dict.find(min_val).value() * 10 + max_dict.find(max_val).value()


@always_inline
fn calc[F: fn[IntLiteral] (String) -> Int](line: String) -> Int:
    return F[+1](line) * 10 + F[-1](line)
